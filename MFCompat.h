/*
 * Copyright (c) 2018-2020 WangBin <wbsecg1 at gmail.com>
 * This file is part of MDK MFT plugin
 * Source code: https://github.com/wang-bin/mdk-mft
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
#pragma once
#include <mmreg.h>
#if !(_MSC_VER + 0)
//INITGUID
//# pragma push_macro("DEFINE_GUID")
#undef DEFINE_GUID
#define DEFINE_GUID(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) EXTERN_C const GUID DECLSPEC_SELECTANY name = { l, w1, w2, { b1, b2, b3, b4, b5, b6, b7, b8 } }

// codecapi.h CODECAPI_AVDec/Enc*
////////  codecapi.h BEGIN
DEFINE_GUID(CODECAPI_AVDecVideoAcceleration_H264, 0xf7db8a2f, 0x4f48, 0x4ee8, 0xae, 0x31, 0x8b, 0x6e, 0xbe, 0x55, 0x8a, 0xe2);
DEFINE_GUID(CODECAPI_AVDecVideoAcceleration_MPEG2, 0xf7db8a2e, 0x4f48, 0x4ee8, 0xae, 0x31, 0x8b, 0x6e, 0xbe, 0x55, 0x8a, 0xe2);
DEFINE_GUID(CODECAPI_AVDecVideoAcceleration_VC1, 0xf7db8a30, 0x4f48, 0x4ee8, 0xae, 0x31, 0x8b, 0x6e, 0xbe, 0x55, 0x8a, 0xe2);
DEFINE_GUID(CODECAPI_AVDecAudioDualMono, 0x4a52cda8, 0x30f8, 0x4216, 0xbe, 0x0f, 0xba, 0x0b, 0x20, 0x25, 0x92, 0x1d);
DEFINE_GUID(CODECAPI_AVDecAudioDualMonoReproMode, 0xa5106186, 0xcc94, 0x4bc9, 0x8c, 0xd9, 0xaa, 0x2f, 0x61, 0xf6, 0x80, 0x7e);
DEFINE_GUID(CODECAPI_AVDecCommonMeanBitRate, 0x59488217, 0x007a, 0x4f7a, 0x8e, 0x41, 0x5c, 0x48, 0xb1, 0xea, 0xc5, 0xc6);

DEFINE_GUID(CODECAPI_AVDDSurroundMode, 0x99f2f386, 0x98d1, 0x4452, 0xa1, 0x63, 0xab, 0xc7, 0x8a, 0x6e, 0xb7, 0x70);
DEFINE_GUID(CODECAPI_AVDecDDOperationalMode, 0xd6d6c6d1, 0x064e, 0x4fdd, 0xa4, 0x0e, 0x3e, 0xcb, 0xfc, 0xb7, 0xeb, 0xd0);
DEFINE_GUID(CODECAPI_AVDecDDMatrixDecodingMode, 0xddc811a5, 0x04ed, 0x4bf3, 0xa0, 0xca, 0xd0, 0x04, 0x49, 0xf9, 0x35, 0x5f);
DEFINE_GUID(CODECAPI_AVDecDDDynamicRangeScaleHigh, 0x50196c21, 0x1f33, 0x4af5, 0xb2, 0x96, 0x11, 0x42, 0x6d, 0x6c, 0x87, 0x89);
DEFINE_GUID(CODECAPI_AVDecDDDynamicRangeScaleLow, 0x044e62e4, 0x11a5, 0x42d5, 0xa3, 0xb2, 0x3b, 0xb2, 0xc7, 0xc2, 0xd7, 0xcf);
DEFINE_GUID(CODECAPI_AVDecDDStereoDownMixMode, 0x6ce4122c, 0x3ee9, 0x4182, 0xb4, 0xae, 0xc1, 0x0f, 0xc0, 0x88, 0x64, 0x9d);
////////  codecapi.h END

// WMA1. Apparently there is no official GUID symbol for this.
DEFINE_GUID(MFAudioFormat_MSAUDIO1, 0x00000160, 0x0000, 0x0010, 0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71);

// mmreg.h
#define  WAVE_FORMAT_OPUS                       0x704F /* Opus */
#define  WAVE_FORMAT_ALAC                       0x6C61 /* Apple Lossless */
#ifndef WAVE_FORMAT_FLAC
#define  WAVE_FORMAT_FLAC                       0xF1AC /* flac.sourceforge.net */
#endif
////////  mfapi.h BEGIN
//#if (WINVER >= _WIN32_WINNT_WINTHRESHOLD)
DEFINE_MEDIATYPE_GUID( MFAudioFormat_FLAC,              WAVE_FORMAT_FLAC );
DEFINE_MEDIATYPE_GUID( MFAudioFormat_ALAC,              WAVE_FORMAT_ALAC );
DEFINE_MEDIATYPE_GUID( MFAudioFormat_Opus,              WAVE_FORMAT_OPUS );
//#endif
// These audio types are not derived from an existing wFormatTag
DEFINE_GUID(MFAudioFormat_Dolby_AC3, // == MEDIASUBTYPE_DOLBY_AC3 defined in ksuuids.h
0xe06d802c, 0xdb46, 0x11cf, 0xb4, 0xd1, 0x00, 0x80, 0x05f, 0x6c, 0xbb, 0xea);
DEFINE_GUID(MFAudioFormat_Dolby_DDPlus, // == MEDIASUBTYPE_DOLBY_DDPLUS defined in wmcodecdsp.h
0xa7fb87af, 0x2d02, 0x42fb, 0xa4, 0xd4, 0x5, 0xcd, 0x93, 0x84, 0x3b, 0xdd);
DEFINE_GUID(MFAudioFormat_Vorbis,      // {8D2FD10B-5841-4a6b-8905-588FEC1ADED9}
0x8D2FD10B, 0x5841, 0x4a6b, 0x89, 0x05, 0x58, 0x8F, 0xEC, 0x1A, 0xDE, 0xD9);

DEFINE_MEDIATYPE_GUID(MFVideoFormat_MP42, 0x3234504D);
DEFINE_MEDIATYPE_GUID(MFVideoFormat_L8,        50);
DEFINE_MEDIATYPE_GUID(MFVideoFormat_L16,       81);

DEFINE_GUID(MF_MT_VIDEO_ROTATION, 0xc380465d, 0x2271, 0x428c, 0x9b, 0x83, 0xec, 0xea, 0x3b, 0x4a, 0x85, 0xc1);
// desktop|game
DEFINE_GUID(MF_MT_CUSTOM_VIDEO_PRIMARIES, 0x47537213, 0x8cfb, 0x4722, 0xaa, 0x34, 0xfb, 0xc9, 0xe2, 0x4d, 0x77, 0xb8);
//#if (WINVER >= _WIN32_WINNT_WIN10)
DEFINE_GUID(MF_MT_MAX_LUMINANCE_LEVEL, 0x50253128, 0xc110, 0x4de4, 0x98, 0xae, 0x46, 0xa3, 0x24, 0xfa, 0xe6, 0xda);
DEFINE_GUID(MF_MT_MAX_FRAME_AVERAGE_LUMINANCE_LEVEL, 0x58d4bf57, 0x6f52, 0x4733, 0xa1, 0x95, 0xa9, 0xe2, 0x9e, 0xcf, 0x9e, 0x27);
DEFINE_GUID(MF_MT_MAX_MASTERING_LUMINANCE, 0xd6c6b997, 0x272f, 0x4ca1, 0x8d, 0x0, 0x80, 0x42, 0x11, 0x1a, 0xf, 0xf6);
DEFINE_GUID(MF_MT_MIN_MASTERING_LUMINANCE, 0x839a4460, 0x4e7e, 0x4b4f, 0xae, 0x79, 0xcc, 0x8, 0x90, 0x5c, 0x7b, 0x27);
//#endif // (WINVER > _WIN32_WINNT_WIN10)
////////  mfapi.h END

////////  mftransform.h BEGIN
DEFINE_GUID(MFT_ENUM_HARDWARE_VENDOR_ID_Attribute, 0x3aecb0cc, 0x35b, 0x4bcc, 0x81, 0x85, 0x2b, 0x8d, 0x55, 0x1e, 0xf3, 0xaf);
DEFINE_GUID(MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER, 0xef80833f, 0xf8fa, 0x44d9, 0x80, 0xd8, 0x41, 0xed, 0x62, 0x32, 0x67, 0xc);
DEFINE_GUID(MFT_DECODER_QUALITY_MANAGEMENT_CUSTOM_CONTROL, 0xa24e30d7, 0xde25, 0x4558, 0xbb, 0xfb, 0x71, 0x7, 0xa, 0x2d, 0x33, 0x2e);
DEFINE_GUID(MFT_DECODER_QUALITY_MANAGEMENT_RECOVERY_WITHOUT_ARTIFACTS, 0xd8980deb, 0xa48, 0x425f, 0x86, 0x23, 0x61, 0x1d, 0xb4, 0x1d, 0x38, 0x10);

DEFINE_GUID(MF_SA_BUFFERS_PER_SAMPLE, 0x873c5171, 0x1e3d, 0x4e25, 0x98, 0x8d, 0xb4, 0x33, 0xce, 0x04, 0x19, 0x83);
DEFINE_GUID(MF_SA_D3D11_BINDFLAGS, 0xeacf97ad, 0x065c, 0x4408, 0xbe, 0xe3, 0xfd, 0xcb, 0xfd, 0x12, 0x8b, 0xe2);
DEFINE_GUID(MF_SA_D3D11_USAGE, 0xe85fe442, 0x2ca3, 0x486e, 0xa9, 0xc7, 0x10, 0x9d, 0xda, 0x60, 0x98, 0x80);
DEFINE_GUID(MF_SA_D3D11_AWARE, 0x206b4fc8, 0xfcf9, 0x4c51, 0xaf, 0xe3, 0x97, 0x64, 0x36, 0x9e, 0x33, 0xa0);
DEFINE_GUID(MF_SA_D3D11_SHARED, 0x7b8f32c3, 0x6d96, 0x4b89, 0x92, 0x3, 0xdd, 0x38, 0xb6, 0x14, 0x14, 0xf3);
DEFINE_GUID(MF_SA_D3D11_SHARED_WITHOUT_MUTEX, 0x39dbd44d, 0x2e44, 0x4931, 0xa4, 0xc8, 0x35, 0x2d, 0x3d, 0xc4, 0x21, 0x15);
DEFINE_GUID(MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT, 0x851745d5, 0xc3d6, 0x476d, 0x95, 0x27, 0x49, 0x8e, 0xf2, 0xd1, 0xd, 0x18);
DEFINE_GUID(MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE, 0xf5523a5, 0x1cb2, 0x47c5, 0xa5, 0x50, 0x2e, 0xeb, 0x84, 0xb4, 0xd1, 0x4a);
////////  mftransform.h END


////////  mfidl.h BEGIN
DEFINE_GUID(CLSID_MSH264DecoderMFT, 0x62CE7E72, 0x4C71, 0x4d20, 0xB1, 0x5D, 0x45, 0x28, 0x31, 0xA8, 0x7D, 0x9D);
DEFINE_GUID(CLSID_MSH264EncoderMFT, 0x6ca50344, 0x051a, 0x4ded, 0x97, 0x79, 0xa4, 0x33, 0x05, 0x16, 0x5e, 0x35);
DEFINE_GUID(CLSID_MSDDPlusDecMFT, 0x177C0AFE, 0x900B, 0x48d4, 0x9E, 0x4C, 0x57, 0xAD, 0xD2, 0x50, 0xB3, 0xD4);
DEFINE_GUID(CLSID_MP3DecMediaObject, 0xbbeea841, 0x0a63, 0x4f52, 0xa7, 0xab, 0xa9, 0xb3, 0xa8, 0x4e, 0xd3, 0x8a);
DEFINE_GUID(CLSID_MSAACDecMFT, 0x32d186a7, 0x218f, 0x4c75, 0x88, 0x76, 0xdd, 0x77, 0x27, 0x3a, 0x89, 0x99);
DEFINE_GUID(CLSID_MSH265DecoderMFT, 0x420A51A3, 0xD605, 0x430C, 0xB4, 0xFC, 0x45, 0x27, 0x4F, 0xA6, 0xC5, 0x62);
DEFINE_GUID(CLSID_WMVDecoderMFT, 0x82d353df, 0x90bd, 0x4382, 0x8b, 0xc2, 0x3f, 0x61, 0x92, 0xb7, 0x6e, 0x34);
DEFINE_GUID(CLSID_WMADecMediaObject, 0x2eeb4adf, 0x4578, 0x4d10, 0xbc, 0xa7, 0xbb, 0x95, 0x5f, 0x56, 0x32, 0x0a);
DEFINE_GUID(CLSID_MSMPEGAudDecMFT, 0x70707B39, 0xB2CA, 0x4015, 0xAB, 0xEA, 0xF8, 0x44, 0x7D, 0x22, 0xD8, 0x8B);
DEFINE_GUID(CLSID_MSMPEGDecoderMFT, 0x2D709E52, 0x123F, 0x49b5, 0x9C, 0xBC, 0x9A, 0xF5, 0xCD, 0xE2, 0x8F, 0xB9);
DEFINE_GUID(CLSID_AudioResamplerMediaObject, 0xf447b69e, 0x1884, 0x4a7e, 0x80, 0x55, 0x34, 0x6f, 0x74, 0xd6, 0xed, 0xb3);
DEFINE_GUID(CLSID_MSVPxDecoder, 0xE3AAF548, 0xC9A4, 0x4C6E, 0x23, 0x4D, 0x5A, 0xDA, 0x37, 0x4B, 0x00, 0x00);
DEFINE_GUID(CLSID_MSOpusDecoder, 0x63e17c10, 0x2d43, 0x4c42, 0x8f, 0xe3, 0x8d, 0x8b, 0x63, 0xe4, 0x6a, 0x6a);
DEFINE_GUID(CLSID_VideoProcessorMFT, 0x88753b26, 0x5b24, 0x49bd, 0xb2, 0xe7, 0xc, 0x44, 0x5c, 0x78, 0xc9, 0x82);

//#define MIDL_INTERFACE(x)   struct DECLSPEC_UUID(x) DECLSPEC_NOVTABLE

#ifndef __CRT_UUID_DECL
// clang: attribute declaration must precede definition [-Wignored-attributes] (previous definition is here DECLARE_INTERFACE_(IDirectSoundNotify, IUnknown))
struct __declspec(uuid("{245BF8E9-0755-40f7-88A5-AE0F18D55E17}")) IMFTrackedSample;
#endif
// https://stackoverflow.com/questions/23977244/how-can-i-define-an-uuid-for-a-class-and-use-uuidof-in-the-same-way-for-g
// define missing guid of IMFTrackedSample, required by __uuidof()
#ifdef __CRT_UUID_DECL // for mingw, in _mingw.h
struct IMFTrackedSample;
__CRT_UUID_DECL(IMFTrackedSample, 0x245BF8E9, 0x0755, 0x40f7, 0x88, 0xa5, 0xae, 0x0F, 0x18, 0xD5, 0x5E, 0x17);
#endif // assume msvc like
MIDL_INTERFACE("245BF8E9-0755-40f7-88A5-AE0F18D55E17")
IMFTrackedSample : public IUnknown
{
public:
    virtual HRESULT STDMETHODCALLTYPE SetAllocator(
        /* [annotation][in] */
        _In_  IMFAsyncCallback *pSampleAllocator,
        /* [unique][in] */ IUnknown *pUnkState) = 0;

};

// TODO: IMFShutdown
////////  mfidl.h END

//# pragma pop_macro("DEFINE_GUID")
#endif
// uuids not defined in sdk: https://www.magnumdb.com/search?q=value%3A%223341%22
// find uuid name by value: dumpbin -all mfuuid.lib, RAW DATA field is uuid value in littel endian
#define DEFINE_GUID_STATIC(name,l,w1,w2,b1,b2,b3,b4,b5,b6,b7,b8) EXTERN_C const GUID DECLSPEC_SELECTANY name = { l, w1, w2, { b1, b2, b3, b4, b5, b6, b7, b8 } }
// TODO: _uuid literal
DEFINE_GUID_STATIC(MF_MT_D3D_DECODE_PROFILE_GUID, 0x657c3e17, 0x3341, 0x41a7, 0x9a, 0xe6, 0x37, 0xa9, 0xd6, 0x99, 0x85, 0x1f);
DEFINE_GUID_STATIC(MF_MEDIA_EXTENSION_PACKAGED_WINDOWS_SIGNED, 0x3c0fbe52, 0xd034, 0x4115, 0x99, 0x5d, 0x95, 0xb3, 0x56, 0xb9, 0x85, 0x5c);
DEFINE_GUID_STATIC(MF_MEDIA_EXTENSION_ABSOLUTE_DLLPATH, 0x7347c815, 0x79fc, 0x4ad9, 0x87, 0x7d, 0xac, 0xdf, 0x5f, 0x46, 0x68, 0x5e);
DEFINE_GUID_STATIC(MF_MEDIA_EXTENSION_PACKAGE_FULL_NAME, 0x957193ad, 0x9029, 0x4835, 0xa2, 0xf2, 0x3e, 0xc9, 0xae, 0x9b, 0xb6, 0xc8);
DEFINE_GUID_STATIC(MF_MEDIA_EXTENSION_PACKAGE_FAMILY_NAME, 0x9d8b61a8, 0x6bc8, 0x4bff, 0xb3, 0x1f, 0x3a, 0x31, 0x06, 0x0a, 0xfa, 0x3d);
DEFINE_GUID_STATIC(MF_TELEMETRY_OBJECT_INSTANCE_ATTRIBUTE, 0xbb49bc51, 0x1810, 0x4c3a, 0xa9, 0xcf, 0xd5, 0x9c, 0x4e, 0x5b, 0x96, 0x22); // not defined in mfuuid.lib
DEFINE_GUID_STATIC(MF_MEDIA_EXTENSION_ACTIVATABLE_CLASS_ID, 0xde106d30, 0x42fb, 0x4767, 0x80, 0x8d, 0x0f, 0xcc, 0x68, 0x11, 0xb0, 0xb9);
DEFINE_GUID_STATIC(MF_MEDIA_EXTENSION_PACKAGE_REG_NEEDED, 0xf9542f80, 0xd069, 0x4efe, 0xb3, 0x0d, 0x34, 0x55, 0x36, 0xf7, 0x6a, 0xaa);
DEFINE_GUID_STATIC(MF_MEDIA_EXTENSION_WEB_PLATFORM_ALLOWED, 0xf9a1ef38, 0xf61e, 0x42e6, 0x87, 0xb3, 0x30, 0x94, 0x38, 0xf9, 0xac, 0x67);
DEFINE_GUID_STATIC(MF_INPROCDLL_LIFETIME_MANAGER, 0x592a2a5a, 0xe797, 0x491a, 0x97, 0x38, 0xc0, 0x00, 0x7b, 0xe2, 0x8c, 0x52); // not defined in mfuuid.lib
//KSDATAFORMAT_SUBTYPE_IEC61937_DOLBY_DIGITAL_PLUS, 0x0000000a, 0x0cea, 0x0010, 0x80, 0x00, 0x00, 0xaa, 0x00, 0x38, 0x9b, 0x71);
#if (WDK_NTDDI_VERSION < NTDDI_WIN10_RS3)
DEFINE_MEDIATYPE_GUID(MFVideoFormat_AV1,        FCC('AV01'));
#endif